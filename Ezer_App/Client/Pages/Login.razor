@page "/login"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<div class="logreg-container d-flex justify-content-center gap-5 mt-4">

  <div class="reg col-lg-4 col-xl-3 shadow-sm">
    <div class="card shadow-sm">
      <div class="card-header">
        <h2 class="text-ezer">Register</h2>
      </div>
      <div class="card-body p-4">

        <EditForm Model="@newUser" OnValidSubmit="@ModalAgree">
          <DataAnnotationsValidator />

          <div class="form-floating">
            <InputText id="FirstName" @bind-Value="newUser.FirstName" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="FirstName">First Name:</label>
            <ValidationMessage For="() => newUser.FirstName" />
          </div>
          <div class="form-floating mt-3">
            <InputText id="LastName" @bind-Value="newUser.LastName" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="LastName">Last Name:</label>
            <ValidationMessage For="() => newUser.LastName" />
          </div>
          <div class="form-floating mt-3">
            <InputText id="Email" @bind-Value="newUser.Email" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="Email">Email:</label>
            <ValidationMessage For="() => newUser.Email" />
            <div class="validation-error mb-3" style="color: #eb3135;">
              @userExists
            </div>
          </div>
          <div class="form-floating mt-3">
            <InputText type=password id="Password" @bind-Value="newUser.Password" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="Password">Password:</label>
            <ValidationMessage For="() => newUser.Password" />
          </div>
          <div class="form-floating mt-3">
            <InputText type=password id="ConfirmPassword" @bind-Value="confirmPassword" class="form-control"
              placeholder="F" style="font-size: .8rem; height: 45px" />
            <label for="ConfirmPassword">Confirm Password:</label>
            <div class="validation-error mb-3" style="color: #eb3135;">
              @passwordsNoMatch
            </div>
          </div>
          <button type="button" class="mt-3 btn btn-primary" @onclick="() => OpenDisclaimerModal()">Register</button>

          @if (DisclaimerModelOpen)
          {
            <div class="modal fade show" id="myModal" style="display:block; backdrop-filter: blur(5px);" aria-modal="true"
              role="dialog">
              <div class="modal-dialog shadow">
                <div class="modal-content">
                  <div class="modal-header d-flex align-items-start">
                    <div style="width: 30px;"></div>
                    <div class="text m-auto">
                      <h4 class="display-6">DISCLAIMER</h4>
                      <h5 class="mb-0 display-6" style="font-size: 1.5rem;">Please read...</h5>
                    </div>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="@ModalCancel"><span class="oi oi-x"
                        aria-hidden="true"></span></button>
                  </div>
                  <div class="modal-body">
                    <p>@ModalBody</p>
                  </div>
                  <div class="modal-footer">
                    <div class="footer-buttons d-flex gap-5 m-auto">
                      <a href="/" class="btn btn-primary">No Thanks</a>
                      <button type="submit" class="btn btn-success">I Agree</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          }

        </EditForm>

      </div>
    </div>
  </div>

  <div style="width: 20px;"></div>

  <div class="login col-lg-4 col-xl-3">
    <div class="card shadow-sm">
      <div class="card-header">
        <h2 class="text-ezer">Login</h2>
      </div>
      <div class="card-body p-4">

        <EditForm Model="@loginUser" OnValidSubmit="@LoginSubmit">
          <DataAnnotationsValidator />
          <div class="validation-error mb-3" style="color: #eb3135;">
            @notInDB
          </div>

          <div class="form-floating">
            <InputText for="LogEmail" class="form-control" placeholder="F" style="font-size: .8rem; height: 45px"
            @bind-Value="loginUser.LogEmail" />
            <label id="LogEmail">Email:</label>
            <ValidationMessage For="() => loginUser.LogEmail" />
          </div>
          <div class="form-floating mt-3">
            <InputText type=password for="LogPassword" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" @bind-Value="loginUser.LogPassword" />
            <label id="LogPassword">Password:</label>
            <ValidationMessage For="() => loginUser.LogPassword" />
          </div>
          <button type="submit" class="mt-3 btn btn-primary">Login</button>
        </EditForm>

      </div>
    </div>
  </div>
  @* <button type="button" onclick="@SecretButton">SECRET BUTTON</button> *@
</div>

<div class="footer">
  <p style="margin: 10px; padding: 10px; font-size: 1.1rem" class="text-ezer display-6">Ezer App - 2023 - Created By <a href="https://www.linkedin.com/in/spencer-j-6ba942198/" target="_blank">Spencer Johnson</a> and <a href="http://evanwiorek.com" target="_blank">Evan Wiorek</a></p>
</div>


@code {
  @* modal functions *@
  [Parameter]
  public EventCallback<bool> OnClose { get; set; }
  User? newUser = new User();
  LoginUser? loginUser = new LoginUser();
  public string confirmPassword { get; set; } = "";
  [Parameter]
  public string ModalBody { get; set; } = "In the future, this will be a disclaimer about the contraction calculation feature of this app. It is currently not implemented, and so this modal is demonstrational for now.";
  public string userExists { get; set; } = "";
  public string passwordsNoMatch { get; set; } = "";
  public string notInDB { get; set; } = "";
  public User? createdUser { get; set; }
  User? loggedInUser { get; set; }
  private async Task ModalAgree()
  {
    DisclaimerModelOpen = false;
    if (newUser.Password == confirmPassword)
    {
      createdUser = await UserService.CreateUser(newUser);
      if (createdUser != null)
      {
        await localStorage.SetItemAsync("UUID", createdUser.UserId);
        await localStorage.SetItemAsync("UserName", createdUser.FirstName);
        StateHasChanged();
        NavigationManager.NavigateTo("dashboard", forceLoad: true);
      }
      else
      {
        userExists = "Email is already registered.";
        StateHasChanged();
      }
    }
    else
    {
      passwordsNoMatch = "Passwords do not match.";
      StateHasChanged();
    }
  }
  private async Task LoginSubmit()
  {
    loggedInUser = await UserService.LoginUser(loginUser);
    if (loggedInUser != null)
    {
      await localStorage.SetItemAsync("UUID", loggedInUser.UserId);
      await localStorage.SetItemAsync("UserName", loggedInUser.FirstName);
      await localStorage.SetItemAsync("DueDate", loggedInUser.DueDate);
      StateHasChanged();
      NavigationManager.NavigateTo("dashboard", forceLoad: true);
    }
    else
    {
      notInDB = "Invalid Email/Password.";
      StateHasChanged();
    }
  }
  private void ModalCancel()
  {
    DisclaimerModelOpen = false;
  }
  protected override async Task OnInitializedAsync()
  {
    string currentUrl = NavigationManager.Uri;
    StateHasChanged();
  }

  public bool DisclaimerModelOpen { get; set; }

  private void OnDisclaimerAgree(bool accepted)
  {
    DisclaimerModelOpen = false;
    StateHasChanged();
  }

  private void OpenDisclaimerModal()
  {
    DisclaimerModelOpen = true;
    StateHasChanged();
  }
  private async Task SecretButton()
  {
    Random random = new Random();
    List<string> firstnames = new List<string>();
    firstnames.Add("Jane");
    firstnames.Add("Wonda");
    firstnames.Add("Deb");
    firstnames.Add("Debbie");
    firstnames.Add("Audrey");
    firstnames.Add("Aubrey");
    firstnames.Add("Cassie");
    firstnames.Add("Lyla");
    firstnames.Add("Aaron");
    firstnames.Add("Rita");
    firstnames.Add("Stacey");
    firstnames.Add("Trish");
    firstnames.Add("Brice");
    firstnames.Add("Susan");
    firstnames.Add("Belinda");
    List<string> lastnames = new List<string>();
    lastnames.Add("Jones");
    lastnames.Add("Williams");
    lastnames.Add("Dedrick");
    lastnames.Add("Devris");
    lastnames.Add("Anders");
    lastnames.Add("Akron");
    lastnames.Add("Carter");
    lastnames.Add("Liami");
    lastnames.Add("Archer");
    lastnames.Add("Lacy");
    lastnames.Add("Dimi");
    lastnames.Add("Iqra");
    lastnames.Add("Gudrun");
    lastnames.Add("Miria");
    lastnames.Add("Jefferson");
    List<string> states = new List<string>();
    {
      states.Add("Alabama");
      states.Add("Alaska");
      states.Add("Arizona");
      states.Add("Arkansas");
      states.Add("California");
      states.Add("Colorado");
      states.Add("Connecticut");
      states.Add("Delaware");
      states.Add("Florida");
      states.Add("Georgia");
      states.Add("Hawaii");
      states.Add("Idaho");
      states.Add("Illinois");
      states.Add("Indiana");
      states.Add("Iowa");
      states.Add("Kansas");
      states.Add("Kentucky");
      states.Add("Louisiana");
      states.Add("Maine");
      states.Add("Maryland");
      states.Add("Massachusetts");
      states.Add("Michigan");
      states.Add("Minnesota");
      states.Add("Mississippi");
      states.Add("Missouri");
      states.Add("Montana");
      states.Add("Nebraska");
      states.Add("Nevada");
      states.Add("New Hampshire");
      states.Add("New Jersey");
      states.Add("New Mexico");
      states.Add("New York");
      states.Add("North Carolina");
      states.Add("North Dakota");
      states.Add("Ohio");
      states.Add("Oklahoma");
      states.Add("Oregon");
      states.Add("Pennsylvania");
      states.Add("Rhode Island");
      states.Add("South Carolina");
      states.Add("South Dakota");
      states.Add("Tennessee");
      states.Add("Texas");
      states.Add("Utah");
      states.Add("Vermont");
      states.Add("Virginia");
      states.Add("Washington");
      states.Add("West Virginia");
      states.Add("Wisconsin");
      states.Add("Wyoming");
    }
    List<string> cities = new List<string>();
    {
      cities.Add("Washington");
      cities.Add("Springfield");
      cities.Add("Chester");
      cities.Add("Lincoln");
      cities.Add("Jamestown");
      cities.Add("Brentwood");
      cities.Add("Germantown");
      cities.Add("Salem");
      cities.Add("Greenville");
      cities.Add("Bristol");
      cities.Add("Fairview");
      cities.Add("Madison");
      cities.Add("Georgetown");
      cities.Add("Williamsburg");
      cities.Add("Stewart");
      cities.Add("Lansing");
      cities.Add("Landsdown");
      cities.Add("Porttown");
      cities.Add("Pottersfield");
      cities.Add("Bakersfield");
      cities.Add("Hillcrest");
      cities.Add("Wilderness");
      cities.Add("Steeple");
      cities.Add("Andover");
    }
    User fakeNewUser = new User();
    fakeNewUser.FirstName = firstnames[random.Next(0, 15)];
    fakeNewUser.LastName = lastnames[random.Next(0, 15)];
    fakeNewUser.Email = $"{fakeNewUser.FirstName}{fakeNewUser.LastName}{random.Next(1, 4000)}@gmail.com";
    fakeNewUser.Password = "password";
    @* fakeNewUser.ConfirmPassword = "password!1"; *@
    fakeNewUser.AddressState = states[random.Next(0, 50)];
    fakeNewUser.AddressCity = cities[random.Next(0, 24)];

    Console.WriteLine(fakeNewUser.FirstName);
    Console.WriteLine(fakeNewUser.LastName);
    Console.WriteLine(fakeNewUser.Email);
    Console.WriteLine(fakeNewUser.Password);
    Console.WriteLine(fakeNewUser.AddressCity);
    Console.WriteLine(fakeNewUser.AddressState);



    fakeNewUser = await UserService.CreateUser(fakeNewUser);
  }
}